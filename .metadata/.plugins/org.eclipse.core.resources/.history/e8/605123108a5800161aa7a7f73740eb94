/*
 * ITC_Server.cpp
 *
 *  Created on: 2016年7月7日
 *      Author: root
 */
#include "include.h"

int udp_sockfd;
struct sockaddr_in ServerAddr;

socklen_t peerlen;

struct SignalData SignalRealData[SignalMaxNum];
void *ItcServerCommt(void *arg)
{
	ConnetcServer();
	while(1)
	{

	}
	return (void *)0;
}

void ConnetcServer()
{

	if ((udp_sockfd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
	{
		perror("fail to socket");
		exit(-1);
	}

	int on=1;
	if((setsockopt(udp_sockfd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on)))<0)
	 {
			perror("setsockopt failed");
			exit(EXIT_FAILURE);
	 }

		/*bzero(&myaddr, sizeof(myaddr));
		myaddr.sin_family = PF_INET;
		myaddr.sin_port = htons(port);
		myaddr.sin_addr.s_addr = INADDR_ANY;
		//int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
		if ( bind( sockfd, (struct sockaddr *)&myaddr, sizeof(myaddr) ) < 0 )
		{
			perror("fail to bind");
			exit(-1);
		}*/

	memset(&ServerAddr,'\0',sizeof(ServerAddr));
	ServerAddr.sin_family = AF_INET;
	ServerAddr.sin_port = htons(10010);
	ServerAddr.sin_addr.s_addr = inet_addr("192.168.1.140");


}

int RecvFromServer(int Rec_fd,char *Rec_buf)
{
		struct timeval 	Rec_timeVal;
		fd_set  Rec_fdSet;
		int ret,numbytes;
		int sin_size_1=sizeof(struct sockaddr_in);    //sin_size值需要初始化，否则在第一次接受数据时将无法获得对方的地址信息

		Rec_timeVal.tv_sec = 60;
		Rec_timeVal.tv_usec = 0;
		FD_ZERO(&Rec_fdSet);
		FD_SET(Rec_fd, &Rec_fdSet);
		ret = select((int) Rec_fd + 1, &Rec_fdSet,NULL, NULL, &Rec_timeVal);
		if( ret == 0 )    //select timeout
		{
			printf("Rec select timeout with result=%d\n",ret);
			return 0;
		}
		if( !ret )    //select error
		{
			printf("TCP Select error result=%d,file=%s,function=%s,line=%d\n",ret,__FILE__,__FUNCTION__,__LINE__);
			return 0;
		}
		else          //select success
		{
			memset(Rec_buf,'\0',1000);
			if ((numbytes=recvfrom(Rec_fd,  Rec_buf,  SingleRecvMaxLen,  0,  (struct sockaddr *)&ServerAddr, (socklen_t *) &sin_size_1))==-1)
			 {
				perror("recv ");
				//sleep(2);
				//exit(1);
				return 0;
			 }
			if(numbytes == 0)
			{
				return 0;
			}
			else if(numbytes >5)           //头   长度_H   长度_L   校验    尾
			{
				Rec_buf[numbytes] = '\0';
				if(checksum(Rec_buf) == true)
				{
					AnalyzeBuffer(Rec_buf);
				}
			}
			return numbytes;
		}
}
void SendToServer(char *recvbuf,int len)
{

}
int UpdateParam()
{
	int i = 0;

	switch(i)
	{
			case 0:
				if(!   (1)   )                       //   1 =	该配置的结果
				{
					//break;
				}
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
			case 4:
				break;
			case 5:
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 9:
				break;
			case 10:
				break;
			case 11:
				break;
			case 12:
				break;
			case 13:
				break;
			case 14:
				break;
			case 15:
				break;
			case 16:
				break;
			case 17:
				break;
			case 18:
				break;
			case 19:
				break;
			case 20:
				break;
			default:
				break;
	}
	return 0;
}
void AnalyzeBuffer(char *Rec_buf)
{
	int signal_num ;
	for(signal_num = 0;signal_num < SignalMaxNum;signal_num++)
	{
		if( SignalRealData[signal_num].CrossID == (Rec_buf[7] * 256 + Rec_buf[8]))
		{
			break;
		}
	}
	if(signal_num == SignalMaxNum)
	{
		return;
	}
	if(Rec_buf[9] == 0x10)
	{

		switch(Rec_buf[10])
		{
			case 0x50:             	//realdata
				realdata(Rec_buf,signal_num);
				break;
			case 0x44:            	//voldata
				voldata(Rec_buf,signal_num);
				break;
			case 0x45:           	//occodata
				occodata(Rec_buf,signal_num);
				break;
			default:              	//faultdata
			{
				if((Rec_buf[10] >= 0x80 &&  Rec_buf[10] <= 0x8A ) || (Rec_buf[10] >= 0xA0&&  Rec_buf[10] <= 0xA5))
				{
					faultdata(Rec_buf,signal_num);
				}
				break;
			}
		}
	}
}
void realdata(char *recvbuf,int signal_num)
{

	int i,j,k;
	//相位灯态 ,从第16字节开始
	char a[2];
	bzero(SignalRealData[signal_num].PhaseLampStatus,32);
	for(i = 0; i < 32 ; i++)
	{
		SignalRealData[signal_num].PhaseLampStatus[i] =  recvbuf[16 + i];
	}


	//printf("dian liu::%s\n\n",SignalRealData[signal_num].phase_current);
	//检测器状态，4个字节
	int m = 0;

	for(i = 0; i < 4 ; i++)
	{
		for(j = 0;j < 8; j++)
		{
			if((recvbuf[144 +  i] &(0x80 >>  j)) != 0  )
			{
				SignalRealData[signal_num].detect_status[m * 2]  = '0';
				SignalRealData[signal_num].detect_status[m * 2 + 1]  = '\,';
			}
			else
			{
				SignalRealData[signal_num].detect_status[m * 2]  = '1';
				SignalRealData[signal_num].detect_status[m * 2 + 1]  = '\,';
			}
			m++;
		}
	}
	//printf("!!!!!!!!!!!chuliqi zhuangtai = %s\n",SignalRealData[signal_num].detect_status);


	/*处理检测器数据*/
	m = 0;
	for(i = 0; i < 4 ; i++)
	{
		for(j = 0;j < 8; j++)
		{
			if((recvbuf[148 +  i] &(0x80 >>  j)) == 0  )
			{
				SignalRealData[signal_num].detect_data_status[m * 2]  = '0';
				SignalRealData[signal_num].detect_data_status[m * 2 + 1]  = '\,';
			}
			else
			{
				SignalRealData[signal_num].detect_data_status[m * 2]  = '1';
				SignalRealData[signal_num].detect_data_status[m * 2 + 1]  = '\,';
			}
			m++;
		}
	}

	/*处理紧急输入状态*/


	/*处理优先输入状态*/


	/*处理门状态,前门、后门、侧门*/


	/*处理方案数据*/
	/*if(SignalRealData[signal_num].control_model != 0x00)
		SignalRealData[signal_num].control_last_model = SignalRealData[signal_num].control_model;//记录上一次运行模式
	SignalRealData[signal_num].control_model = recvbuf[158];*/
	SignalRealData[signal_num].
	SignalRealData[signal_num].cur_plan = recvbuf[159];
	SignalRealData[signal_num].cur_week = (recvbuf[160] * 256 + recvbuf[161])/10;

	if(SignalRealData[signal_num].CurStageNo != recvbuf[162])
		SignalRealData[signal_num].LastStageNo = SignalRealData[signal_num].CurStageNo;
	SignalRealData[signal_num].CurStageNo = recvbuf[162];

	SignalRealData[signal_num].coordination_number = recvbuf[163];
	SignalRealData[signal_num].coordination_time = (recvbuf[164] * 256 + recvbuf[165])/10;
	SignalRealData[signal_num].release_time = (recvbuf[166] * 256 + recvbuf[167])/10;
	SignalRealData[signal_num].rest_time = (recvbuf[168] * 256 + recvbuf[169])/10;

	SignalRealData[signal_num].signal_info_state = 1;
	SignalRealData[signal_num].oracleFlag[0]= 1;
	SignalRealData[signal_num].oracleFlag[1]= 1;
	/*处理更新时间*/
	//sprintf(SignalRealData[signal_num].update_time,"%d-%d-%d %d:%d:%d",recvbuf[254] * 256 + recvbuf[255],recvbuf[256],recvbuf[257],recvbuf[258],recvbuf[259],recvbuf[260]);
	/*struct tm *p;
	time_t signalTime = (time_t)(recvbuf[254] *256*256*256 + recvbuf[255]*256*256 + recvbuf[256]*256 +recvbuf[257]);

	p = gmtime(&signalTime);
	sprintf(SignalRealData[signal_num].update_time,"%d-%d-%d %d:%d:%d",(1900+p->tm_year),(1+p->tm_mon),p->tm_mday,p->tm_hour,p->tm_min,p->tm_sec);
*/
}
void faultdata(char *recvbuf,int signal_num)
{
	if((recvbuf[10] >= 0x80 &&  recvbuf[10] <= 0x89 ) || recvbuf[10] == 0xA0)
	{
			unsigned int fault_data =  (recvbuf[12]<<24) + (recvbuf[13]<<16) + (recvbuf[14]<<8) + recvbuf[15];
			char fault_string[200];
			bzero(fault_string,200);
			int ErrorCount;
			int i;
			for(i = 0 ; i < 32; i++)
			{
				unsigned int temp = 0x80000000 >> i;

				if((fault_data & temp) != 0)
				{
					ErrorCount++;
					char stemp[4];
					sprintf(stemp,"%d,",(i+1));
					strcat(fault_string,stemp);
				}
			}
			if(ErrorCount == 0)
			{
				/*无错误*/
				return;
			}

			bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
			switch(recvbuf[10])
			{
				case 0x80:  			//绿冲突
						sprintf(SignalRealData[signal_num].ErrorDesc,"绿冲突：相位");
						SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x81:          	//红绿冲突
						sprintf(SignalRealData[signal_num].ErrorDesc,"红绿冲突：相位");
						SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x82:				//灯故障
					sprintf(SignalRealData[signal_num].ErrorDesc,"灯故障：相位");
					SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x83:				//配置故障
					sprintf(SignalRealData[signal_num].ErrorDesc,"配置故障");
					SignalRealData[signal_num].SignalError = 5;
						break;
				case 0x84:				//控制单元缺失
					sprintf(SignalRealData[signal_num].ErrorDesc,"控制单元缺失");
						break;
				case 0x85:         	//检测器故障
					sprintf(SignalRealData[signal_num].ErrorDesc,"检测器故障：编号");
						break;
				case 0x86:				//检测板通讯故障
					sprintf(SignalRealData[signal_num].ErrorDesc,"检测板通讯故障");
						break;
				case 0x87:				//检测板缺失
					sprintf(SignalRealData[signal_num].ErrorDesc,"检测板缺失：板号");
						break;
				case 0x88:				//相位板通讯故障
					sprintf(SignalRealData[signal_num].ErrorDesc,"相位板通讯故障");
						break;
				case 0x89:				//相位板缺失
					sprintf(SignalRealData[signal_num].ErrorDesc,"相位板缺失：板号");
						break;
				case 0xA0:				//检测器长时间不动作报警
					sprintf(SignalRealData[signal_num].ErrorDesc,"检测器长时间不动作报警：编号");
						break;
				default:
					return;
			}
			time_t fault_time = (time_t)((recvbuf[16]<<24) + (recvbuf[17]<<16) + (recvbuf[18]<<8) +recvbuf[19]);
			struct tm *tbclock;
			tbclock = gmtime(&fault_time);
			sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
			strcat(SignalRealData[signal_num].ErrorDesc,fault_string);
	}
	else
	{
		switch(recvbuf[10])
		{
			case 0xA1:				//电压报警
					break;
			case 0xA2:				//开门报警
					break;
			case 0xA3:				//震动报警
					break;
			case 0xA4:				//烟雾报警
					break;
			case 0xA5:				//水浸报警
					break;
			default:
				break;
		}
	}
}
void occodata(char *recvbuf,int signal_num)
{
	SignalRealData[signal_num].TrafficData[recvbuf[11]].Occupancy = recvbuf[12]*256*256*256 +recvbuf[13]*256*256 +recvbuf[14]*256+recvbuf[15];

}
void voldata(char *recvbuf,int signal_num)
{
	SignalRealData[signal_num].TrafficData[recvbuf[11]].Volume = recvbuf[12]*256*256*256 +recvbuf[13]*256*256 +recvbuf[14]*256+recvbuf[15];

}
int checksum( char * rcv_buf)
{
	int rcv_len = rcv_buf[1] * 256 + rcv_buf[2];
	int check_sum = 0;
	int i;
	 if (0x7e == rcv_buf[0] && 0x7d == rcv_buf[rcv_len + 1])
		{

			 for (i = 1; i < rcv_len; i++)
			{
				check_sum += rcv_buf[i];
			}

			if (rcv_buf[rcv_len] == (check_sum & 0xFF))
			{
						 return true;
			}
			else
			{
				printf(" jiao yan cuo wu\n");
				return false;
			}

		 }
	 else
	 {
	 	printf(" signal tou wei cuo wu\n");
	 	return false;
	 }
}

//电压报警
void fault_0xA1(char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);
	bzero(SignalRealData[signal_num].FaultTime,200);
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
	sprintf(SignalRealData[signal_num].ErrorDesc,"电压报警");
	SignalRealData[signal_num].SignalError = 2;
}
//开门报警
void fault_0xA2(char *recvbuf,int signal_num)
{
	SignalRealData[signal_num].SignalError = 9;
	//开门报警
	unsigned int fault_data =  recvbuf[12];
	int i;
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);


	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
	for(i = 0 ; i < 3; i++)
	{
		unsigned int temp = 0x80 >> i;

		switch(i)
		{
			case 0:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].ErrorDesc,"前门开门报警;");

				}
				break;
			case 1:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].ErrorDesc,"后门开门报警;");

				}
				break;
			case 2:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].ErrorDesc,"侧门开门报警;");
				}
				break;
		}
	}
}
//震动报警
void fault_0xA3(char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);


	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
	sprintf(SignalRealData[signal_num].ErrorDesc,"震动报警");
	SignalRealData[signal_num].SignalError = 9;
}
//烟雾报警
void fault_0xA4(char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);


	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
	sprintf(SignalRealData[signal_num].ErrorDesc,"烟雾报警");
	SignalRealData[signal_num].SignalError = 9;
}
//水浸报警
void fault_0xA5(char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);


	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].ErrorDesc,sizeof(SignalRealData[signal_num].ErrorDesc));
	sprintf(SignalRealData[signal_num].ErrorDesc,"水浸报警");
	SignalRealData[signal_num].SignalError = 9;
}


