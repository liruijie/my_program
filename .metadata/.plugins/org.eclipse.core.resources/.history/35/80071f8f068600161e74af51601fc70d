/*
 * ITC_Server.cpp
 *
 *  Created on: 2016年7月7日
 *      Author: root
 */
#include "include.h"

#define MyPort_UDP		10020
//#define RemoteIP_UDP	"192.168.1.121"
int udp_sockfd;
struct sockaddr_in ServerAddr;
int sin_size_1=sizeof(struct sockaddr_in);    //sin_size值需要初始化，否则在第一次接受数据时将无法获得对方的地址信息
socklen_t peerlen;
struct QueueInfo Queue[QueueNum];
struct QueueInfo *QueueHead,*QueueTail;
/*发送更新信号机参数命令时加锁，防止别的连接进行更新*/
pthread_mutex_t UpdateSignalParameter;

/*当解析信号机数据或开始向平台(TCP建立的连接)上报时加锁，防止两个线程互相更改标志位
对应的两个线程分别是void *ReportRealStatus(void *arg)  和

当上报时，解析线程停止解析数据，接收到的数据全部进入队列
当解析数据时，上报线程停止上报，等待解析完成*/
pthread_mutex_t UpdateRealData;
struct SignalData SignalRealData[SignalMaxNum];

extern char ITC_ServerAddr[20];
void *ItcServerCommt(void *arg)
{
	unsigned char RecvBuf[SingleRecvMaxLen];
	int len;
	int i;
	time_t time_now;

	pthread_t pth_AnalyzeSignalData;
	printf("Creat thread ItcServerCommt success,%s,%s,%d\n",__FILE__,__FUNCTION__,__LINE__);
	sleep(1);
	InitQueue();           								//初始化队列
	ConnetcServer();										//建立UDP连接
	pthread_mutex_init(&UpdateRealData,NULL);		//初始化更新实时数据时用的互斥锁
	i = pthread_create(&pth_AnalyzeSignalData,NULL,AnalyzeSignalData,NULL);//建立数据解析线程
	if(i != 0)
	{
		perror("Fail to create pthread");
		exit(EXIT_FAILURE);
	}

	pthread_mutex_init(&UpdateSignalParameter,NULL);
	UpdateParam(1000);

	sleep(5);
	while(1)
	{
		time(&time_now);
		len = RecvFromServer(udp_sockfd,RecvBuf);
		if(RecvBuf[10]  == 0xCC)
		{
			for(i=0;i<len;i++)
				printf("%#02X  ",RecvBuf[i]);
			printf("\n");
		}

		if(len > 5)
		{
			if(checksum(RecvBuf) == true)
			{
				//AnalyzeBuffer(RecvBuf);
				EnQueue(RecvBuf);
			}
		}
		time(&time_now);
		for(i = 0;i< SignalMaxNum;i++)
		{
			if((time_now - SignalRealData[i].ReportTime) > 30 &&  (SignalRealData[i].SignalState == Online))
			{
				SignalRealData[i].SignalState = Offline;
				SignalRealData[i].IsStatusUpdate = true;
			}
		}
	}
	return (void *)0;
}
void *AnalyzeSignalData(void *arg)
{
	unsigned char buf[512];
	printf("Creat thread AnalyzeSignalData success,%s,%s,%d\n",__FILE__,__FUNCTION__,__LINE__);
	while(1)
	{
		if(IsQueueEmpty() ==  false)    //队列不为空
		{
			DelQueue(buf);
			pthread_mutex_lock(&UpdateRealData);
			AnalyzeBuffer(buf);
			pthread_mutex_unlock(&UpdateRealData);
		}
		else
		{
			usleep(10*1000);   //休眠100ms
		}
	}
	return (void *)0;
}
void ConnetcServer()
{
	struct sockaddr_in myaddr;
	if ((udp_sockfd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
	{
		perror("fail to socket");
		exit(-1);
	}

	int on=1;
	if((setsockopt(udp_sockfd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on)))<0)
	 {
			perror("setsockopt failed");
			exit(EXIT_FAILURE);
	 }

	bzero(&myaddr, sizeof(myaddr));
	myaddr.sin_family = PF_INET;
	myaddr.sin_port = htons(MyPort_UDP);
	myaddr.sin_addr.s_addr = INADDR_ANY;
	if ( bind( udp_sockfd, (struct sockaddr *)&myaddr, sizeof(myaddr) ) < 0 )
	{
		perror("fail to bind");
		exit(-1);
	}

	memset(&ServerAddr,'\0',sizeof(ServerAddr));
	ServerAddr.sin_family = AF_INET;
	ServerAddr.sin_port = htons(10010);
	ServerAddr.sin_addr.s_addr = inet_addr(ITC_ServerAddr);


}

int RecvFromServer(int Rec_fd,unsigned char *Rec_buf)
{
		//struct timeval 	Rec_timeVal;
		fd_set  Rec_fdSet;
		int ret,numbytes;


		//Rec_timeVal.tv_sec = 1;
		//Rec_timeVal.tv_usec = 0;
		FD_ZERO(&Rec_fdSet);
		FD_SET(Rec_fd, &Rec_fdSet);
		ret = select((int) Rec_fd + 1, &Rec_fdSet,NULL, NULL, NULL);
		if( ret == 0 )    //select timeout
		{
			//printf("Rec select timeout with result=%d\n",ret);
			return 0;
		}
		if( !ret )    //select error
		{
			printf("TCP Select error result=%d,file=%s,function=%s,line=%d\n",ret,__FILE__,__FUNCTION__,__LINE__);
			return 0;
		}
		else          //select success
		{
			memset(Rec_buf,'\0',SingleRecvMaxLen);
			if ((numbytes=recvfrom(Rec_fd,  Rec_buf,  SingleRecvMaxLen,  0,  (struct sockaddr *)&ServerAddr, (socklen_t *) &sin_size_1))==-1)
			 {
				perror("recv ");
				//sleep(2);
				//exit(1);
				return 0;
			 }
			if(numbytes == 0)
			{
				return 0;
			}
			else if(numbytes >5)           //头   长度_H   长度_L   校验    尾         至少5个
			{
				Rec_buf[numbytes] = '\0';
			}
			return numbytes;
		}
}
void SendToServer(int Socket_fd,char *recvbuf,int len)
{
	sendto(Socket_fd,recvbuf,len,0,(struct sockaddr *)&ServerAddr, sizeof(ServerAddr));
}
int UpdateParam(int SignalID)
{
	int i = 0;
	unsigned char buf[17]={0x7E,0x00,0x0F,0x00,0x01,0xFF,0xFF,0x00,0x00,0x20,0xCC,0x10,0x00,0x00,0x00,0x00,0x7D};
	int check_sum = 0;
	buf[7] = (SignalID & 0xFF00) >> 8;
	buf[8] = (SignalID & 0x00FF);
	for (i = 1; i < 15; i++)
	{
		check_sum = (check_sum +buf[i]);
	}

	buf[15] = check_sum & 0xFF;

	//7E 00 0F 00 01 FF FF 27 10    20  2B   10 00 00 00         A0 7D
	SendToServer(udp_sockfd,(char *)buf,17);

	return 0;
}
void AnalyzeBuffer(unsigned char *Rec_buf)
{
	int signal_num ;
	time_t time_now;
	for(signal_num = 0;signal_num < SignalMaxNum;signal_num++)
	{
		if( SignalRealData[signal_num].CrossID == (Rec_buf[7] * 256 + Rec_buf[8]))
		{
			break;
		}
		if(SignalRealData[signal_num].CrossID == 0)
		{
			signal_num = SignalMaxNum;
			break;
		}
	}
	if(signal_num == SignalMaxNum)
	{
		return;
	}
	time(&time_now);
	//printf("Recv data signal_id = %d\n",SignalRealData[signal_num].CrossID);
	SignalRealData[signal_num].ReportTime  = time_now;
	if(SignalRealData[signal_num].SignalState == Offline)
	{
		SignalRealData[signal_num].SignalState = Online;
		SignalRealData[signal_num].IsStatusUpdate = true;
	}

	if(Rec_buf[9] == 0x40)
	{

		switch(Rec_buf[10])
		{
			case 0x50:             	//realdata
				realdata(Rec_buf,signal_num);
				break;
			case 0x44:            	//voldata
				voldata(Rec_buf,signal_num);
				break;
			case 0x45:           	//occodata
				occodata(Rec_buf,signal_num);
				break;
			case 0xCC:              //update response

				if(Rec_buf[12] == 0x00)
				{
					printf("update parameter succeed\n");
					kill(getpid(),SIGUSR1);
				}
				else
				{
					printf("update parameter failure\n");
					kill(getpid(),SIGUSR2);
				}
				break;
			default:              	//faultdata
			{
				if((Rec_buf[10] >= 0x80 &&  Rec_buf[10] <= 0x8A ) || (Rec_buf[10] >= 0xA0&&  Rec_buf[10] <= 0xA5))
				{
					faultdata(Rec_buf,signal_num);
					SignalRealData[signal_num].IsSignalErrorUpdate = true;
				}
				break;
			}
		}
	}
}
void realdata(unsigned char *recvbuf,int signal_num)
{

	int i;
	//相位灯态 ,从第16字节开始

	//bzero(SignalRealData[signal_num].PhaseLampStatus,32);
	for(i = 0; i < 32 ; i++)
	{
		if(SignalRealData[signal_num].PhaseLampStatus[i] !=  recvbuf[16 + i])
		{
			SignalRealData[signal_num].PhaseLampStatus[i] =  recvbuf[16 + i];
			SignalRealData[signal_num].IsPhaseUpdate = true;
		}
	}

	/*路口控制方式*/
	if(SignalRealData[signal_num].ControlMode_Value != recvbuf[158])
	{
/*		11 特殊控制-关灯		12 特殊控制-全红		13 特殊控制-全部黄闪		21 单点多时段定时控制		22 单点感应控制
		23 单点自适应控制		31 线协调控制			41 区域协调控制			51 干预控制-手动控制		52 干预控制-锁定阶段控制
		53 干预控制-指定方案 */
		memset(SignalRealData[signal_num].CurControlMode,'\0',3);
		switch(recvbuf[158])
		{
			case 0x11:		//中心时间表控制
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x12:		//中心优化控制
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x13:		//中心协调模式
				sprintf(SignalRealData[signal_num].CurControlMode,"41");
				break;

			case 0x14:		//中心自适应模式
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x15:		//中心手动模式
				if(0xFF != recvbuf[162])     //中心手动模式时，如果阶段是255，那么就是全红模式
					sprintf(SignalRealData[signal_num].CurControlMode,"52");
				else
					sprintf(SignalRealData[signal_num].CurControlMode,"51");
				break;

			case 0x21:		//本地多时段模式
				sprintf(SignalRealData[signal_num].CurControlMode,"21");
				break;

			case 0x22:		//本地感应模式
				sprintf(SignalRealData[signal_num].CurControlMode,"22");
				break;

			case 0x23:		//本地无缆协调模式
				sprintf(SignalRealData[signal_num].CurControlMode,"31");
				break;

			case 0x24:		//本地自适应模式
				sprintf(SignalRealData[signal_num].CurControlMode,"23");
				break;

			case 0x25:		//本地手动模式
				sprintf(SignalRealData[signal_num].CurControlMode,"51");
				break;

			case 0x26:		//本地自由控制模式
				sprintf(SignalRealData[signal_num].CurControlMode,"21");
				break;

			case 0x27:		//本地有缆协调模式
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x28:		//本地跟随手动模式
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x29:		//本地优先模式
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x2A:		//本地紧急模式
				sprintf(SignalRealData[signal_num].CurControlMode,"53");
				break;

			case 0x2B:		//本地黄闪模式
				sprintf(SignalRealData[signal_num].CurControlMode,"13");
				break;

			default:
				break;
		}
		SignalRealData[signal_num].ControlMode_Value = recvbuf[158];
		SignalRealData[signal_num].IsControlModeUpdate = true;
	}
	/*方案数据*/
	if(SignalRealData[signal_num].CurPlan != recvbuf[159])
	{
		SignalRealData[signal_num].CurPlan = recvbuf[159];
		SignalRealData[signal_num].IsCrossPlanUpdate = true;
	}

	/*周期数据*/
	if( SignalRealData[signal_num].CurCycleLen != ( (recvbuf[160] * 256 + recvbuf[161])/10  ) )
	{
		SignalRealData[signal_num].LastCycleLen = SignalRealData[signal_num].CurCycleLen;
		SignalRealData[signal_num].CurCycleLen = (recvbuf[160] * 256 + recvbuf[161])/10;
		time_t time_now;
		time(&time_now);
		struct tm *localtime_now = localtime(&time_now);
		sprintf(SignalRealData[signal_num].StartTime,"%d-%02d-%02d %02d:%02d:%02d",\
				(1900+localtime_now->tm_year),(1+localtime_now->tm_mon),localtime_now->tm_mday,localtime_now->tm_hour,localtime_now->tm_min,localtime_now->tm_sec);

		SignalRealData[signal_num].IsCrossCycleUpdate = true;
	}
	/*阶段数据*/
	if(SignalRealData[signal_num].CurStageNo_Value != recvbuf[162])
	{
		memset(SignalRealData[signal_num].LastStageNo,'\0',sizeof(SignalRealData[signal_num].LastStageNo));
		memset(SignalRealData[signal_num].LastStageLen,'\0',sizeof(SignalRealData[signal_num].LastStageLen));
		memcpy(SignalRealData[signal_num].LastStageNo ,SignalRealData[signal_num].CurStageNo,sizeof(SignalRealData[signal_num].CurStageNo));
		memcpy(SignalRealData[signal_num].LastStageLen ,SignalRealData[signal_num].CurStageLen,sizeof(SignalRealData[signal_num].CurStageLen));

		memset(SignalRealData[signal_num].CurStageNo,'\0',sizeof(SignalRealData[signal_num].CurStageNo));
		memset(SignalRealData[signal_num].CurStageLen,'\0',sizeof(SignalRealData[signal_num].CurStageLen));
		sprintf(SignalRealData[signal_num].CurStageNo ,"%d", recvbuf[162]);
		sprintf(SignalRealData[signal_num].CurStageLen,"%d", (recvbuf[168] * 256 + recvbuf[169])/10+1);        //阶段改变时，剩余时间也就是阶段长度
		SignalRealData[signal_num].CurStageNo_Value = recvbuf[162];
		SignalRealData[signal_num].IsCrossStageUpdate = true;
	}


}
void faultdata(unsigned char *recvbuf,int signal_num)
{
	if((recvbuf[10] >= 0x80 &&  recvbuf[10] <= 0x89 ) || recvbuf[10] == 0xA0)
	{
			unsigned int fault_data =  (recvbuf[12]<<24) + (recvbuf[13]<<16) + (recvbuf[14]<<8) + recvbuf[15];
			char fault_string[200];
			int ErrorCount;
			int i;
			bzero(fault_string,200);
			if( (recvbuf[10] == 0x80) || (recvbuf[10] == 0x81) || (recvbuf[10] == 0x82) || (recvbuf[10] == 0x83) || (recvbuf[10] == 0x85) || (recvbuf[10] == 0xA0))
			{
				for(i = 0 ; i < 32; i++)
				{
					unsigned int temp = 0x80000000 >> i;

					if((fault_data & temp) != 0)
					{
						ErrorCount++;
						char stemp[4];
						sprintf(stemp,"%d,",(i+1));
						strcat(fault_string,stemp);
					}
				}
			}
			else if((recvbuf[10] == 0x84) )
			{
				for(i = 0 ; i < 6; i++)
				{
					unsigned int temp = 0x80 >> i;
					if((fault_data & temp) != 0)
					{
						if(( (i+1)==5) || ( (i+1)==6))
							continue;
						ErrorCount++;
						char stemp[4];
						sprintf(stemp,"%d,",(i+1));
						strcat(fault_string,stemp);
					}
				}
			}
			else if( (recvbuf[10] == 0x86) || (recvbuf[10] == 0x87) || (recvbuf[10] == 0x88) || (recvbuf[10] == 0x89))
			{
				for(i = 0 ; i < 6; i++)
				{
					unsigned int temp = 0x80 >> i;
					if((fault_data & temp) != 0)
					{
						ErrorCount++;
						char stemp[4];
						sprintf(stemp,"%d,",(i+1));
						strcat(fault_string,stemp);
					}
				}
			}

			if(ErrorCount == 0)
			{
				/*无错误*/
				return;
			}

			bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
			switch(recvbuf[10])
			{
				case 0x80:  			//绿冲突
						sprintf(SignalRealData[signal_num].FaultDesc,"绿冲突：相位");
						SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x81:          	//红绿冲突
						sprintf(SignalRealData[signal_num].FaultDesc,"红绿冲突：相位");
						SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x82:				//灯故障
						sprintf(SignalRealData[signal_num].FaultDesc,"灯故障：相位");
						SignalRealData[signal_num].SignalError = 1;
						break;
				case 0x83:				//配置故障
						sprintf(SignalRealData[signal_num].FaultDesc,"配置故障");
						SignalRealData[signal_num].SignalError = 5;
						break;
				case 0x84:				//控制单元缺失
						sprintf(SignalRealData[signal_num].FaultDesc,"控制单元缺失");
						break;
				case 0x85:         	//检测器故障
						sprintf(SignalRealData[signal_num].FaultDesc,"检测器故障：编号");
						break;
				case 0x86:				//检测板通讯故障
						sprintf(SignalRealData[signal_num].FaultDesc,"检测板通讯故障");
						break;
				case 0x87:				//检测板缺失
						sprintf(SignalRealData[signal_num].FaultDesc,"检测板缺失：板号");
						break;
				case 0x88:				//相位板通讯故障
						sprintf(SignalRealData[signal_num].FaultDesc,"相位板通讯故障");
						break;
				case 0x89:				//相位板缺失
						sprintf(SignalRealData[signal_num].FaultDesc,"相位板缺失：板号");
						break;
				case 0xA0:				//检测器长时间不动作报警
						sprintf(SignalRealData[signal_num].FaultDesc,"检测器长时间不动作报警：编号");
						break;
				default:
					return;
			}
			time_t fault_time = (time_t)((recvbuf[16]<<24) + (recvbuf[17]<<16) + (recvbuf[18]<<8) +recvbuf[19]);
			struct tm *tbclock;
			tbclock = gmtime(&fault_time);
			bzero(SignalRealData[signal_num].FaultTime,sizeof(SignalRealData[signal_num].FaultTime));
			sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
			strcat(SignalRealData[signal_num].FaultDesc,fault_string);
	}
	else
	{
		switch(recvbuf[10])
		{
			case 0xA1:				//电压报警
					fault_0xA1(recvbuf,signal_num);
					break;
			case 0xA2:				//开门报警
					fault_0xA2(recvbuf,signal_num);
					break;
			case 0xA3:				//震动报警
					fault_0xA3(recvbuf,signal_num);
					break;
			case 0xA4:				//烟雾报警
					fault_0xA4(recvbuf,signal_num);
					break;
			case 0xA5:				//水浸报警
					fault_0xA5(recvbuf,signal_num);
					break;
			default:
				break;
		}
	}
}
void occodata(unsigned char *recvbuf,int signal_num)
{
	int LineID = recvbuf[11]-1;
	if( (LineID>31) || (LineID < 0) )
		return;
	long value = recvbuf[12]*256*256*256 +recvbuf[13]*256*256 +recvbuf[14]*256+recvbuf[15];
	sprintf(SignalRealData[signal_num].TrafficData[LineID].Occupancy,"%ld",value);
	SignalRealData[signal_num].TrafficData[LineID].IsDataUpdate = true;
	SignalRealData[signal_num].IsTrafficDataUpdate = true;
}
void voldata(unsigned char *recvbuf,int signal_num)
{
	int LineID = recvbuf[11]-1;
	if( (LineID>31) || (LineID < 0) )
		return;
	long value = recvbuf[12]*256*256*256 +recvbuf[13]*256*256 +recvbuf[14]*256+recvbuf[15];
	sprintf(SignalRealData[signal_num].TrafficData[LineID].Volume,"%ld",value);
	time_t endtime = (time_t)((recvbuf[16]<<24) + (recvbuf[17]<<16) + (recvbuf[18]<<8) +recvbuf[19]);
	struct tm *tbclock;
	tbclock = gmtime(&endtime);
	bzero(SignalRealData[signal_num].EndTime,sizeof(SignalRealData[signal_num].EndTime));
	sprintf(SignalRealData[signal_num].EndTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	SignalRealData[signal_num].TrafficData[LineID].IsDataUpdate = true;
	SignalRealData[signal_num].IsTrafficDataUpdate = true;
}
int checksum(unsigned char * rcv_buf)
{
	int rcv_len = rcv_buf[1] * 256 + rcv_buf[2];
	int check_sum = 0;
	int i;
	if (0x7e == rcv_buf[0] && 0x7d == rcv_buf[rcv_len + 1])
	{
		for (i = 1; i < rcv_len; i++)
		{
			check_sum += rcv_buf[i];
		}
		if (rcv_buf[rcv_len] == (check_sum & 0xFF))
		{
					 return true;
		}
		else
		{
			printf(" jiao yan cuo wu\n");
			return false;
		}
	 }
	 else
	 {
	 	printf(" signal tou wei cuo wu\n");
	 	return false;
	 }
}

//电压报警
void fault_0xA1(unsigned char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);
	bzero(SignalRealData[signal_num].FaultTime,30);
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
	sprintf(SignalRealData[signal_num].FaultDesc,"电压报警");
	SignalRealData[signal_num].SignalError = 2;
}
//开门报警
void fault_0xA2(unsigned char *recvbuf,int signal_num)
{
	SignalRealData[signal_num].SignalError = 9;
	//开门报警
	unsigned int fault_data =  recvbuf[12];
	int i;
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);
	bzero(SignalRealData[signal_num].FaultTime,sizeof(SignalRealData[signal_num].FaultTime));
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
	for(i = 0 ; i < 3; i++)
	{
		unsigned int temp = 0x80 >> i;
		switch(i)
		{
			case 0:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].FaultDesc,"前门开门报警;");

				}
				break;
			case 1:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].FaultDesc,"后门开门报警;");

				}
				break;
			case 2:
				if((fault_data & temp) != 0)
				{
					strcat(SignalRealData[signal_num].FaultDesc,"侧门开门报警;");
				}
				break;
		}
	}
}
//震动报警
void fault_0xA3(unsigned char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);

	bzero(SignalRealData[signal_num].FaultTime,sizeof(SignalRealData[signal_num].FaultTime));
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
	sprintf(SignalRealData[signal_num].FaultDesc,"震动报警");
	SignalRealData[signal_num].SignalError = 9;
}
//烟雾报警
void fault_0xA4(unsigned char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);

	bzero(SignalRealData[signal_num].FaultTime,sizeof(SignalRealData[signal_num].FaultTime));
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
	sprintf(SignalRealData[signal_num].FaultDesc,"烟雾报警");
	SignalRealData[signal_num].SignalError = 9;
}
//水浸报警
void fault_0xA5(unsigned char *recvbuf,int signal_num)
{
	time_t now_time ;
	time(&now_time);
	struct tm *tbclock;
	tbclock = gmtime(&now_time);

	bzero(SignalRealData[signal_num].FaultTime,sizeof(SignalRealData[signal_num].FaultTime));
	sprintf(SignalRealData[signal_num].FaultTime,"%d-%02d-%02d %02d:%02d:%02d",(1900+tbclock->tm_year),(1+tbclock->tm_mon),tbclock->tm_mday,tbclock->tm_hour,tbclock->tm_min,tbclock->tm_sec);
	bzero(SignalRealData[signal_num].FaultDesc,sizeof(SignalRealData[signal_num].FaultDesc));
	sprintf(SignalRealData[signal_num].FaultDesc,"水浸报警");
	SignalRealData[signal_num].SignalError = 9;
}


void InitQueue()
{
	int i;
	for(i = 0;i< QueueNum-1;i++)
	{
		Queue[i].Next = &Queue[i+1];
	}
	Queue[i].Next = &Queue[0];
	QueueTail = QueueHead = &Queue[0];

}
int IsQueueFull()
{
	return( QueueTail->Next == QueueHead );   //这种判断方式导致最后一个无法使用，即队用可用的位置比创建的位置少1
}
void EnQueue(unsigned char *recvbuf)
{
	if(IsQueueFull())
			return;
	memset(QueueTail->buf,'\0',512);
	memcpy(QueueTail->buf,recvbuf,512);
	QueueTail = QueueTail->Next;
}
void DelQueue(unsigned char *outbuf)
{
	memset(outbuf,'\0',512);
	memcpy(outbuf,QueueHead->buf,512);
	QueueHead = QueueHead->Next;
}
int IsQueueEmpty()
{
	return( QueueHead == QueueTail );
}


